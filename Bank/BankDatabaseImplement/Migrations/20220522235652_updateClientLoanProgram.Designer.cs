// <auto-generated />
using System;
using BankDatabaseImplement;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace BankDatabaseImplement.Migrations
{
    [DbContext(typeof(BankDatabase))]
    [Migration("20220522235652_updateClientLoanProgram")]
    partial class updateClientLoanProgram
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.3")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("BankDatabaseImplement.Models.Clerk", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClerkFIO")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Clerks");
                });

            modelBuilder.Entity("BankDatabaseImplement.Models.Client", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("ClerkId")
                        .HasColumnType("int");

                    b.Property<string>("ClientFIO")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("DateVisit")
                        .HasColumnType("datetime2");

                    b.Property<string>("PassportData")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TelephoneNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("ClerkId");

                    b.ToTable("Clients");
                });

            modelBuilder.Entity("BankDatabaseImplement.Models.ClientDeposit", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("ClientId")
                        .HasColumnType("int");

                    b.Property<int>("DepositId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ClientId");

                    b.HasIndex("DepositId");

                    b.ToTable("ClientDeposits");
                });

            modelBuilder.Entity("BankDatabaseImplement.Models.ClientLoanProgram", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("ClientId")
                        .HasColumnType("int");

                    b.Property<int>("LoanProgramId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ClientId");

                    b.HasIndex("LoanProgramId");

                    b.ToTable("ClientLoanPrograms");
                });

            modelBuilder.Entity("BankDatabaseImplement.Models.Currency", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("CurrencyName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("DateAdding")
                        .HasColumnType("datetime2");

                    b.Property<int>("ManagerId")
                        .HasColumnType("int");

                    b.Property<decimal>("RubExchangeRate")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("Id");

                    b.HasIndex("ManagerId");

                    b.ToTable("Currencies");
                });

            modelBuilder.Entity("BankDatabaseImplement.Models.Deposit", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("ClerkId")
                        .HasColumnType("int");

                    b.Property<decimal>("DepositInterest")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("DepositName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("ClerkId");

                    b.ToTable("Deposits");
                });

            modelBuilder.Entity("BankDatabaseImplement.Models.DepositCurrency", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("CurrencyId")
                        .HasColumnType("int");

                    b.Property<int>("DepositId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CurrencyId");

                    b.HasIndex("DepositId");

                    b.ToTable("DepositCurrencies");
                });

            modelBuilder.Entity("BankDatabaseImplement.Models.LoanProgram", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<decimal>("InterestRate")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("LoanProgramName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ManagerId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ManagerId");

                    b.ToTable("LoanPrograms");
                });

            modelBuilder.Entity("BankDatabaseImplement.Models.LoanProgramCurrency", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("CurrencyId")
                        .HasColumnType("int");

                    b.Property<int>("LoanProgramId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CurrencyId");

                    b.HasIndex("LoanProgramId");

                    b.ToTable("LoanProgramCurrencies");
                });

            modelBuilder.Entity("BankDatabaseImplement.Models.Manager", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ManagerFIO")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Managers");
                });

            modelBuilder.Entity("BankDatabaseImplement.Models.Replenishment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("Amount")
                        .HasColumnType("int");

                    b.Property<int>("ClerkId")
                        .HasColumnType("int");

                    b.Property<DateTime>("DateReplenishment")
                        .HasColumnType("datetime2");

                    b.Property<int>("DepositId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ClerkId");

                    b.HasIndex("DepositId");

                    b.ToTable("Replenishments");
                });

            modelBuilder.Entity("BankDatabaseImplement.Models.Term", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<DateTime>("EndTerm")
                        .HasColumnType("datetime2");

                    b.Property<int>("LoanProgramId")
                        .HasColumnType("int");

                    b.Property<int>("ManagerId")
                        .HasColumnType("int");

                    b.Property<DateTime>("StartTerm")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("LoanProgramId");

                    b.HasIndex("ManagerId");

                    b.ToTable("Terms");
                });

            modelBuilder.Entity("BankDatabaseImplement.Models.Client", b =>
                {
                    b.HasOne("BankDatabaseImplement.Models.Clerk", "Clerk")
                        .WithMany("Clients")
                        .HasForeignKey("ClerkId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Clerk");
                });

            modelBuilder.Entity("BankDatabaseImplement.Models.ClientDeposit", b =>
                {
                    b.HasOne("BankDatabaseImplement.Models.Client", "Client")
                        .WithMany("ClientDeposits")
                        .HasForeignKey("ClientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BankDatabaseImplement.Models.Deposit", "Deposit")
                        .WithMany("DepositClients")
                        .HasForeignKey("DepositId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Client");

                    b.Navigation("Deposit");
                });

            modelBuilder.Entity("BankDatabaseImplement.Models.ClientLoanProgram", b =>
                {
                    b.HasOne("BankDatabaseImplement.Models.Client", "Client")
                        .WithMany("ClientLoanPrograms")
                        .HasForeignKey("ClientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BankDatabaseImplement.Models.LoanProgram", "LoanProgram")
                        .WithMany("ClientLoanPrograms")
                        .HasForeignKey("LoanProgramId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Client");

                    b.Navigation("LoanProgram");
                });

            modelBuilder.Entity("BankDatabaseImplement.Models.Currency", b =>
                {
                    b.HasOne("BankDatabaseImplement.Models.Manager", "Manager")
                        .WithMany("Currencies")
                        .HasForeignKey("ManagerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Manager");
                });

            modelBuilder.Entity("BankDatabaseImplement.Models.Deposit", b =>
                {
                    b.HasOne("BankDatabaseImplement.Models.Clerk", "Clerk")
                        .WithMany("Deposits")
                        .HasForeignKey("ClerkId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Clerk");
                });

            modelBuilder.Entity("BankDatabaseImplement.Models.DepositCurrency", b =>
                {
                    b.HasOne("BankDatabaseImplement.Models.Currency", "Currency")
                        .WithMany("DepositCurrencies")
                        .HasForeignKey("CurrencyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BankDatabaseImplement.Models.Deposit", "Deposit")
                        .WithMany("DepositCurrencies")
                        .HasForeignKey("DepositId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Currency");

                    b.Navigation("Deposit");
                });

            modelBuilder.Entity("BankDatabaseImplement.Models.LoanProgram", b =>
                {
                    b.HasOne("BankDatabaseImplement.Models.Manager", "Manager")
                        .WithMany("LoanPrograms")
                        .HasForeignKey("ManagerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Manager");
                });

            modelBuilder.Entity("BankDatabaseImplement.Models.LoanProgramCurrency", b =>
                {
                    b.HasOne("BankDatabaseImplement.Models.Currency", "Currency")
                        .WithMany("LoanProgramCurrencies")
                        .HasForeignKey("CurrencyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BankDatabaseImplement.Models.LoanProgram", "LoanProgram")
                        .WithMany("LoanProgramCurrencies")
                        .HasForeignKey("LoanProgramId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Currency");

                    b.Navigation("LoanProgram");
                });

            modelBuilder.Entity("BankDatabaseImplement.Models.Replenishment", b =>
                {
                    b.HasOne("BankDatabaseImplement.Models.Clerk", "Clerk")
                        .WithMany("Replenishments")
                        .HasForeignKey("ClerkId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BankDatabaseImplement.Models.Deposit", "Deposit")
                        .WithMany("Replenishments")
                        .HasForeignKey("DepositId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Clerk");

                    b.Navigation("Deposit");
                });

            modelBuilder.Entity("BankDatabaseImplement.Models.Term", b =>
                {
                    b.HasOne("BankDatabaseImplement.Models.LoanProgram", "LoanProgram")
                        .WithMany("Terms")
                        .HasForeignKey("LoanProgramId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BankDatabaseImplement.Models.Manager", "Manager")
                        .WithMany("Terms")
                        .HasForeignKey("ManagerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("LoanProgram");

                    b.Navigation("Manager");
                });

            modelBuilder.Entity("BankDatabaseImplement.Models.Clerk", b =>
                {
                    b.Navigation("Clients");

                    b.Navigation("Deposits");

                    b.Navigation("Replenishments");
                });

            modelBuilder.Entity("BankDatabaseImplement.Models.Client", b =>
                {
                    b.Navigation("ClientDeposits");

                    b.Navigation("ClientLoanPrograms");
                });

            modelBuilder.Entity("BankDatabaseImplement.Models.Currency", b =>
                {
                    b.Navigation("DepositCurrencies");

                    b.Navigation("LoanProgramCurrencies");
                });

            modelBuilder.Entity("BankDatabaseImplement.Models.Deposit", b =>
                {
                    b.Navigation("DepositClients");

                    b.Navigation("DepositCurrencies");

                    b.Navigation("Replenishments");
                });

            modelBuilder.Entity("BankDatabaseImplement.Models.LoanProgram", b =>
                {
                    b.Navigation("ClientLoanPrograms");

                    b.Navigation("LoanProgramCurrencies");

                    b.Navigation("Terms");
                });

            modelBuilder.Entity("BankDatabaseImplement.Models.Manager", b =>
                {
                    b.Navigation("Currencies");

                    b.Navigation("LoanPrograms");

                    b.Navigation("Terms");
                });
#pragma warning restore 612, 618
        }
    }
}
